import 'package:http/http.dart' as http;
import 'dart:convert'; //encoders and decoders for converting between different data representations, including JSON
import '../models/user.dart';
import '../models/game.dart';

class EdgeserverApi {
  //SERVER STRING
  static String server = 'edge-service-kevinvandeputte-tm.cloud.okteto.net'; //to define
  
  /* FETCH HIGHSCORES */
  static Future<List<User>> fetchScore() async {

    //URL
    var url = Uri.https(server, '/scores');

    final response = await http.get(url);

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      return jsonResponse.map((user) => User.fromJson(user)).toList();
    } else {
      throw Exception('Failed to load users');
    }
  }

  /* USERS */
  
  // --- CREATE NEW USER --- //
  static Future<User> createUser(String _username, int _avatarID) async {
    //set up url
    var url = Uri.https(server,"/user", {'username': _username, 'avatarID': _avatarID.toString()});

    //POST
    final http.Response response = await http.post(url);

    //check response
    if (response.statusCode == 200){
      return User.fromJson(jsonDecode(response.body));
    } else{
      throw Exception("Failed to create user");
    }
  }

  // --- UPDATE USER --- //
  static Future<bool> updateUser(User user) async{
    //Set up url
    var url = Uri.https(server, "/user");

    //PUT
    final http.Response response = await http.put(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(user),
    );

    //Return bool depending on succes of put request
    if(response.statusCode == 200){
      return true;
    } else {
      return false;
    }

  }



  /* QUESTIONS */
  // --- GET QUESTIONS BY MODEL NAME --- //
  static Future<Game>fetchQuestionByModelName(String modelname) async{
    //Set up url
    var url = Uri.https(server, "/question/" + modelname);
    //GET
    final response = await http.get(url);
    //Return
    if(response.statusCode == 200){
      return Game.fromJson(jsonDecode(response.body));
    } else{
      throw Exception("Failed to load question");
    }
  }

  // --- GET ALL QUESTIONS --- // 
  static Future<List<Game>> fetchQuestions() async {

    //URL
    var url = Uri.https(server, '/questions');

    final response = await http.get(url);

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      return jsonResponse.map((game) => Game.fromJson(game)).toList();
    } else {
      throw Exception('Failed to load questions');
    }
  }


//GET/questionsbylevel/
   static Future<List<Game>> fetchModelsByLevel(int level) async {
    var url = Uri.https(server, '/questionsbylevel/'+ level.toString() );

    final response = await http.get(url);

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      return jsonResponse.map((game) => Game.fromJson(game)).toList();
    } else {
      throw Exception('Failed to load questions');
    }
  }

  // Get highest level
  static Future<Game> fetchHighestLevel() async{
    var url = Uri.https(server, "/highestlevel");

    final response = await http.get(url);

    //check response
    if (response.statusCode == 200){
      return Game.fromJson(jsonDecode(response.body));
    } else{
      throw Exception("Failed to fetch highes level");
    }

  }

}